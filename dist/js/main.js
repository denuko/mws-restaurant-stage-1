'use strict';

var restaurants = void 0;
var neighborhoods = [];
var cuisines = [];
var map;
var markers = [];

/**
 * Fetch restaurants as soon as the page is loaded.
 */
document.addEventListener('DOMContentLoaded', function (event) {
    updateRestaurants();
});

/**
 * Set neighborhoods HTML.
 */
var fillNeighborhoodsHTML = function fillNeighborhoodsHTML() {
    var neighborhoods = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.neighborhoods;

    var select = document.getElementById('neighborhoods-select');
    neighborhoods.forEach(function (neighborhood) {
        var option = document.createElement('option');
        option.innerHTML = neighborhood;
        option.value = neighborhood;
        select.append(option);
    });
};

/**
 * Set cuisines HTML.
 */
var fillCuisinesHTML = function fillCuisinesHTML() {
    var cuisines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.cuisines;

    var select = document.getElementById('cuisines-select');

    cuisines.forEach(function (cuisine) {
        var option = document.createElement('option');
        option.innerHTML = cuisine;
        option.value = cuisine;
        select.append(option);
    });
};

/**
 * Initialize Google map, called from HTML.
 */
window.initMap = function () {
    var loc = {
        lat: 40.722216,
        lng: -73.987501
    };
    self.map = new google.maps.Map(document.getElementById('map'), {
        zoom: 12,
        center: loc,
        scrollwheel: false
    });

    // Add markers to the map after being initialized
    addMarkersToMap();
};

/**
 * Update page and map for current restaurants.
 */
var updateRestaurants = function updateRestaurants() {
    var cSelect = document.getElementById('cuisines-select');
    var nSelect = document.getElementById('neighborhoods-select');

    var cIndex = cSelect.selectedIndex;
    var nIndex = nSelect.selectedIndex;

    var cuisine = cSelect[cIndex].value;
    var neighborhood = nSelect[nIndex].value;

    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, function (error, restaurants) {
        if (error) {
            // Got an error!
            console.error(error);
        } else {
            resetRestaurants(restaurants);
            fillRestaurantsHTML();

            // Include maps api dynamically only after everything else has been done
            getGoogleMapsApi();
        }
    });
};

/**
 * Clear current restaurants, their HTML and remove their map markers.
 */
var resetRestaurants = function resetRestaurants(restaurants) {
    // Remove all restaurants
    self.restaurants = [];
    var ul = document.getElementById('restaurants-list');
    ul.innerHTML = '';

    // Remove all map markers
    self.markers.forEach(function (m) {
        return m.setMap(null);
    });
    self.markers = [];
    self.restaurants = restaurants;
};

/**
 * Create all restaurants HTML and add them to the webpage.
 */
var fillRestaurantsHTML = function fillRestaurantsHTML() {
    var restaurants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurants;

    var ul = document.getElementById('restaurants-list');
    restaurants.forEach(function (restaurant) {
        if (DBHelper.addRestaurants()) {
            DBHelper.addRestaurantToDatabase(restaurant);
        }
        ul.append(createRestaurantHTML(restaurant));

        if (!self.neighborhoods.includes(restaurant.neighborhood)) {
            self.neighborhoods.push(restaurant.neighborhood);
        }

        if (!self.cuisines.includes(restaurant.cuisine_type)) {
            self.cuisines.push(restaurant.cuisine_type);
        }
    });

    fillNeighborhoodsHTML();
    fillCuisinesHTML();
};

/**
 * Create restaurant HTML.
 */
var createRestaurantHTML = function createRestaurantHTML(restaurant) {
    var li = document.createElement('li');

    // create picture element for restaurant image in restaurant list
    var picture = document.createElement('picture');
    var image = document.createElement('img');
    image.className = 'restaurant-img';
    image.alt = restaurant.name;

    var imageFilename = DBHelper.imageUrlForRestaurant(restaurant);
    if (imageFilename == 'noimg') {
        // If restaurant has not an image, display a no image svg
        // and use its corresponding png as a fallback.
        // Author of the noimg.svg and noimg.png is credited at page's footer.
        var noImgFallback = imageFilename + '.png';
        addImageSourceToPicture(picture, imageFilename + '.svg');
        addImageSourceToPicture(picture, noImgFallback);

        image.src = noImgFallback;
        image.className += ' noimg';
        // TODO: Fix noimg png fallback in IE
    } else {
        // get all possible names of an image depending on its size (small, medium, large)
        var imagesResized = imageNamesBySize(imageFilename);
        // add source to picture element for medium screens
        addImageSourceToPicture(picture, imagesResized.medium, '(min-width: 363px) and (max-width:479px)');

        image.src = imagesResized.small; // small image by default
    }

    picture.append(image);
    li.append(picture);

    var name = document.createElement('h3');
    li.append(name);

    var more = document.createElement('a');
    more.href = DBHelper.urlForRestaurant(restaurant);
    more.innerHTML = restaurant.name;
    more.tabIndex = 0;
    name.append(more);

    var neighborhood = document.createElement('p');
    neighborhood.innerHTML = restaurant.neighborhood;
    li.append(neighborhood);

    var address = document.createElement('p');
    address.innerHTML = restaurant.address;
    li.append(address);

    return li;
};

/**
 * Add markers for current restaurants to the map.
 */
var addMarkersToMap = function addMarkersToMap() {
    var restaurants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurants;

    restaurants.forEach(function (restaurant) {
        // Add marker to the map
        var marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);
        google.maps.event.addListener(marker, 'click', function () {
            window.location.href = marker.url;
        });
        self.markers.push(marker);
    });
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsicmVzdGF1cmFudHMiLCJuZWlnaGJvcmhvb2RzIiwiY3Vpc2luZXMiLCJtYXAiLCJtYXJrZXJzIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJ1cGRhdGVSZXN0YXVyYW50cyIsImZpbGxOZWlnaGJvcmhvb2RzSFRNTCIsInNlbGYiLCJzZWxlY3QiLCJnZXRFbGVtZW50QnlJZCIsImZvckVhY2giLCJvcHRpb24iLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwibmVpZ2hib3Job29kIiwidmFsdWUiLCJhcHBlbmQiLCJmaWxsQ3Vpc2luZXNIVE1MIiwiY3Vpc2luZSIsIndpbmRvdyIsImluaXRNYXAiLCJsb2MiLCJsYXQiLCJsbmciLCJnb29nbGUiLCJtYXBzIiwiTWFwIiwiem9vbSIsImNlbnRlciIsInNjcm9sbHdoZWVsIiwiYWRkTWFya2Vyc1RvTWFwIiwiY1NlbGVjdCIsIm5TZWxlY3QiLCJjSW5kZXgiLCJzZWxlY3RlZEluZGV4IiwibkluZGV4IiwiREJIZWxwZXIiLCJmZXRjaFJlc3RhdXJhbnRCeUN1aXNpbmVBbmROZWlnaGJvcmhvb2QiLCJlcnJvciIsImNvbnNvbGUiLCJyZXNldFJlc3RhdXJhbnRzIiwiZmlsbFJlc3RhdXJhbnRzSFRNTCIsImdldEdvb2dsZU1hcHNBcGkiLCJ1bCIsIm0iLCJzZXRNYXAiLCJhZGRSZXN0YXVyYW50cyIsImFkZFJlc3RhdXJhbnRUb0RhdGFiYXNlIiwicmVzdGF1cmFudCIsImNyZWF0ZVJlc3RhdXJhbnRIVE1MIiwiaW5jbHVkZXMiLCJwdXNoIiwiY3Vpc2luZV90eXBlIiwibGkiLCJwaWN0dXJlIiwiaW1hZ2UiLCJjbGFzc05hbWUiLCJhbHQiLCJuYW1lIiwiaW1hZ2VGaWxlbmFtZSIsImltYWdlVXJsRm9yUmVzdGF1cmFudCIsIm5vSW1nRmFsbGJhY2siLCJhZGRJbWFnZVNvdXJjZVRvUGljdHVyZSIsInNyYyIsImltYWdlc1Jlc2l6ZWQiLCJpbWFnZU5hbWVzQnlTaXplIiwibWVkaXVtIiwic21hbGwiLCJtb3JlIiwiaHJlZiIsInVybEZvclJlc3RhdXJhbnQiLCJ0YWJJbmRleCIsImFkZHJlc3MiLCJtYXJrZXIiLCJtYXBNYXJrZXJGb3JSZXN0YXVyYW50IiwiYWRkTGlzdGVuZXIiLCJsb2NhdGlvbiIsInVybCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxvQkFBSjtBQUNBLElBQUlDLGdCQUFnQixFQUFwQjtBQUNBLElBQUlDLFdBQVcsRUFBZjtBQUNBLElBQUlDLEdBQUo7QUFDQSxJQUFJQyxVQUFVLEVBQWQ7O0FBRUE7OztBQUdBQyxTQUFTQyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMsVUFBQ0MsS0FBRCxFQUFXO0FBQ3JEQztBQUNILENBRkQ7O0FBSUE7OztBQUdBLElBQU1DLHdCQUF3QixTQUF4QkEscUJBQXdCLEdBQXdDO0FBQUEsUUFBdkNSLGFBQXVDLHVFQUF2QlMsS0FBS1QsYUFBa0I7O0FBQ2xFLFFBQU1VLFNBQVNOLFNBQVNPLGNBQVQsQ0FBd0Isc0JBQXhCLENBQWY7QUFDQVgsa0JBQWNZLE9BQWQsQ0FBc0Isd0JBQWdCO0FBQ2xDLFlBQU1DLFNBQVNULFNBQVNVLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBZjtBQUNBRCxlQUFPRSxTQUFQLEdBQW1CQyxZQUFuQjtBQUNBSCxlQUFPSSxLQUFQLEdBQWVELFlBQWY7QUFDQU4sZUFBT1EsTUFBUCxDQUFjTCxNQUFkO0FBQ0gsS0FMRDtBQU1ILENBUkQ7O0FBVUE7OztBQUdBLElBQU1NLG1CQUFtQixTQUFuQkEsZ0JBQW1CLEdBQThCO0FBQUEsUUFBN0JsQixRQUE2Qix1RUFBbEJRLEtBQUtSLFFBQWE7O0FBQ25ELFFBQU1TLFNBQVNOLFNBQVNPLGNBQVQsQ0FBd0IsaUJBQXhCLENBQWY7O0FBRUFWLGFBQVNXLE9BQVQsQ0FBaUIsbUJBQVc7QUFDeEIsWUFBTUMsU0FBU1QsU0FBU1UsYUFBVCxDQUF1QixRQUF2QixDQUFmO0FBQ0FELGVBQU9FLFNBQVAsR0FBbUJLLE9BQW5CO0FBQ0FQLGVBQU9JLEtBQVAsR0FBZUcsT0FBZjtBQUNBVixlQUFPUSxNQUFQLENBQWNMLE1BQWQ7QUFDSCxLQUxEO0FBTUgsQ0FURDs7QUFXQTs7O0FBR0FRLE9BQU9DLE9BQVAsR0FBaUIsWUFBTTtBQUNuQixRQUFJQyxNQUFNO0FBQ05DLGFBQUssU0FEQztBQUVOQyxhQUFLLENBQUM7QUFGQSxLQUFWO0FBSUFoQixTQUFLUCxHQUFMLEdBQVcsSUFBSXdCLE9BQU9DLElBQVAsQ0FBWUMsR0FBaEIsQ0FBb0J4QixTQUFTTyxjQUFULENBQXdCLEtBQXhCLENBQXBCLEVBQW9EO0FBQzNEa0IsY0FBTSxFQURxRDtBQUUzREMsZ0JBQVFQLEdBRm1EO0FBRzNEUSxxQkFBYTtBQUg4QyxLQUFwRCxDQUFYOztBQU1BO0FBQ0FDO0FBQ0gsQ0FiRDs7QUFlQTs7O0FBR0EsSUFBTXpCLG9CQUFvQixTQUFwQkEsaUJBQW9CLEdBQU07QUFDNUIsUUFBTTBCLFVBQVU3QixTQUFTTyxjQUFULENBQXdCLGlCQUF4QixDQUFoQjtBQUNBLFFBQU11QixVQUFVOUIsU0FBU08sY0FBVCxDQUF3QixzQkFBeEIsQ0FBaEI7O0FBRUEsUUFBTXdCLFNBQVNGLFFBQVFHLGFBQXZCO0FBQ0EsUUFBTUMsU0FBU0gsUUFBUUUsYUFBdkI7O0FBRUEsUUFBTWhCLFVBQVVhLFFBQVFFLE1BQVIsRUFBZ0JsQixLQUFoQztBQUNBLFFBQU1ELGVBQWVrQixRQUFRRyxNQUFSLEVBQWdCcEIsS0FBckM7O0FBRUFxQixhQUFTQyx1Q0FBVCxDQUFpRG5CLE9BQWpELEVBQTBESixZQUExRCxFQUF3RSxVQUFDd0IsS0FBRCxFQUFRekMsV0FBUixFQUF3QjtBQUM1RixZQUFJeUMsS0FBSixFQUFXO0FBQUU7QUFDVEMsb0JBQVFELEtBQVIsQ0FBY0EsS0FBZDtBQUNILFNBRkQsTUFFTztBQUNIRSw2QkFBaUIzQyxXQUFqQjtBQUNBNEM7O0FBRUE7QUFDQUM7QUFDSDtBQUNKLEtBVkQ7QUFXSCxDQXJCRDs7QUF1QkE7OztBQUdBLElBQU1GLG1CQUFtQixTQUFuQkEsZ0JBQW1CLENBQUMzQyxXQUFELEVBQWlCO0FBQ3RDO0FBQ0FVLFNBQUtWLFdBQUwsR0FBbUIsRUFBbkI7QUFDQSxRQUFNOEMsS0FBS3pDLFNBQVNPLGNBQVQsQ0FBd0Isa0JBQXhCLENBQVg7QUFDQWtDLE9BQUc5QixTQUFILEdBQWUsRUFBZjs7QUFFQTtBQUNBTixTQUFLTixPQUFMLENBQWFTLE9BQWIsQ0FBcUI7QUFBQSxlQUFLa0MsRUFBRUMsTUFBRixDQUFTLElBQVQsQ0FBTDtBQUFBLEtBQXJCO0FBQ0F0QyxTQUFLTixPQUFMLEdBQWUsRUFBZjtBQUNBTSxTQUFLVixXQUFMLEdBQW1CQSxXQUFuQjtBQUNILENBVkQ7O0FBWUE7OztBQUdBLElBQU00QyxzQkFBc0IsU0FBdEJBLG1CQUFzQixHQUFvQztBQUFBLFFBQW5DNUMsV0FBbUMsdUVBQXJCVSxLQUFLVixXQUFnQjs7QUFDNUQsUUFBTThDLEtBQUt6QyxTQUFTTyxjQUFULENBQXdCLGtCQUF4QixDQUFYO0FBQ0FaLGdCQUFZYSxPQUFaLENBQW9CLHNCQUFjO0FBQzlCLFlBQUkwQixTQUFTVSxjQUFULEVBQUosRUFBK0I7QUFDM0JWLHFCQUFTVyx1QkFBVCxDQUFpQ0MsVUFBakM7QUFDSDtBQUNETCxXQUFHM0IsTUFBSCxDQUFVaUMscUJBQXFCRCxVQUFyQixDQUFWOztBQUVBLFlBQUksQ0FBQ3pDLEtBQUtULGFBQUwsQ0FBbUJvRCxRQUFuQixDQUE0QkYsV0FBV2xDLFlBQXZDLENBQUwsRUFBMkQ7QUFDdkRQLGlCQUFLVCxhQUFMLENBQW1CcUQsSUFBbkIsQ0FBd0JILFdBQVdsQyxZQUFuQztBQUNIOztBQUVELFlBQUksQ0FBQ1AsS0FBS1IsUUFBTCxDQUFjbUQsUUFBZCxDQUF1QkYsV0FBV0ksWUFBbEMsQ0FBTCxFQUFzRDtBQUNsRDdDLGlCQUFLUixRQUFMLENBQWNvRCxJQUFkLENBQW1CSCxXQUFXSSxZQUE5QjtBQUNIO0FBQ0osS0FiRDs7QUFlQTlDO0FBQ0FXO0FBQ0gsQ0FuQkQ7O0FBcUJBOzs7QUFHQSxJQUFNZ0MsdUJBQXVCLFNBQXZCQSxvQkFBdUIsQ0FBQ0QsVUFBRCxFQUFnQjtBQUN6QyxRQUFNSyxLQUFLbkQsU0FBU1UsYUFBVCxDQUF1QixJQUF2QixDQUFYOztBQUVBO0FBQ0EsUUFBTTBDLFVBQVVwRCxTQUFTVSxhQUFULENBQXVCLFNBQXZCLENBQWhCO0FBQ0EsUUFBTTJDLFFBQVFyRCxTQUFTVSxhQUFULENBQXVCLEtBQXZCLENBQWQ7QUFDQTJDLFVBQU1DLFNBQU4sR0FBa0IsZ0JBQWxCO0FBQ0FELFVBQU1FLEdBQU4sR0FBWVQsV0FBV1UsSUFBdkI7O0FBRUEsUUFBTUMsZ0JBQWdCdkIsU0FBU3dCLHFCQUFULENBQStCWixVQUEvQixDQUF0QjtBQUNBLFFBQUlXLGlCQUFpQixPQUFyQixFQUE4QjtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxZQUFNRSxnQkFBbUJGLGFBQW5CLFNBQU47QUFDQUcsZ0NBQXdCUixPQUF4QixFQUFvQ0ssYUFBcEM7QUFDQUcsZ0NBQXdCUixPQUF4QixFQUFpQ08sYUFBakM7O0FBRUFOLGNBQU1RLEdBQU4sR0FBWUYsYUFBWjtBQUNBTixjQUFNQyxTQUFOLElBQW1CLFFBQW5CO0FBQ0E7QUFDSCxLQVhELE1BV087QUFDSDtBQUNBLFlBQU1RLGdCQUFnQkMsaUJBQWlCTixhQUFqQixDQUF0QjtBQUNBO0FBQ0FHLGdDQUF3QlIsT0FBeEIsRUFBaUNVLGNBQWNFLE1BQS9DLEVBQXVELDBDQUF2RDs7QUFFQVgsY0FBTVEsR0FBTixHQUFZQyxjQUFjRyxLQUExQixDQU5HLENBTWdDO0FBQ3RDOztBQUVEYixZQUFRdEMsTUFBUixDQUFldUMsS0FBZjtBQUNBRixPQUFHckMsTUFBSCxDQUFVc0MsT0FBVjs7QUFFQSxRQUFNSSxPQUFPeEQsU0FBU1UsYUFBVCxDQUF1QixJQUF2QixDQUFiO0FBQ0F5QyxPQUFHckMsTUFBSCxDQUFVMEMsSUFBVjs7QUFFQSxRQUFNVSxPQUFPbEUsU0FBU1UsYUFBVCxDQUF1QixHQUF2QixDQUFiO0FBQ0F3RCxTQUFLQyxJQUFMLEdBQVlqQyxTQUFTa0MsZ0JBQVQsQ0FBMEJ0QixVQUExQixDQUFaO0FBQ0FvQixTQUFLdkQsU0FBTCxHQUFpQm1DLFdBQVdVLElBQTVCO0FBQ0FVLFNBQUtHLFFBQUwsR0FBZ0IsQ0FBaEI7QUFDQWIsU0FBSzFDLE1BQUwsQ0FBWW9ELElBQVo7O0FBRUEsUUFBTXRELGVBQWVaLFNBQVNVLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBckI7QUFDQUUsaUJBQWFELFNBQWIsR0FBeUJtQyxXQUFXbEMsWUFBcEM7QUFDQXVDLE9BQUdyQyxNQUFILENBQVVGLFlBQVY7O0FBRUEsUUFBTTBELFVBQVV0RSxTQUFTVSxhQUFULENBQXVCLEdBQXZCLENBQWhCO0FBQ0E0RCxZQUFRM0QsU0FBUixHQUFvQm1DLFdBQVd3QixPQUEvQjtBQUNBbkIsT0FBR3JDLE1BQUgsQ0FBVXdELE9BQVY7O0FBRUEsV0FBT25CLEVBQVA7QUFDSCxDQW5ERDs7QUFxREE7OztBQUdBLElBQU12QixrQkFBa0IsU0FBbEJBLGVBQWtCLEdBQW9DO0FBQUEsUUFBbkNqQyxXQUFtQyx1RUFBckJVLEtBQUtWLFdBQWdCOztBQUN4REEsZ0JBQVlhLE9BQVosQ0FBb0Isc0JBQWM7QUFDOUI7QUFDQSxZQUFNK0QsU0FBU3JDLFNBQVNzQyxzQkFBVCxDQUFnQzFCLFVBQWhDLEVBQTRDekMsS0FBS1AsR0FBakQsQ0FBZjtBQUNBd0IsZUFBT0MsSUFBUCxDQUFZckIsS0FBWixDQUFrQnVFLFdBQWxCLENBQThCRixNQUE5QixFQUFzQyxPQUF0QyxFQUErQyxZQUFNO0FBQ2pEdEQsbUJBQU95RCxRQUFQLENBQWdCUCxJQUFoQixHQUF1QkksT0FBT0ksR0FBOUI7QUFDSCxTQUZEO0FBR0F0RSxhQUFLTixPQUFMLENBQWFrRCxJQUFiLENBQWtCc0IsTUFBbEI7QUFDSCxLQVBEO0FBUUgsQ0FURCIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IHJlc3RhdXJhbnRzO1xyXG5sZXQgbmVpZ2hib3Job29kcyA9IFtdO1xyXG5sZXQgY3Vpc2luZXMgPSBbXTtcclxudmFyIG1hcFxyXG52YXIgbWFya2VycyA9IFtdXHJcblxyXG4vKipcclxuICogRmV0Y2ggcmVzdGF1cmFudHMgYXMgc29vbiBhcyB0aGUgcGFnZSBpcyBsb2FkZWQuXHJcbiAqL1xyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKGV2ZW50KSA9PiB7XHJcbiAgICB1cGRhdGVSZXN0YXVyYW50cygpO1xyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBTZXQgbmVpZ2hib3Job29kcyBIVE1MLlxyXG4gKi9cclxuY29uc3QgZmlsbE5laWdoYm9yaG9vZHNIVE1MID0gKG5laWdoYm9yaG9vZHMgPSBzZWxmLm5laWdoYm9yaG9vZHMpID0+IHtcclxuICAgIGNvbnN0IHNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZWlnaGJvcmhvb2RzLXNlbGVjdCcpO1xyXG4gICAgbmVpZ2hib3Job29kcy5mb3JFYWNoKG5laWdoYm9yaG9vZCA9PiB7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XHJcbiAgICAgICAgb3B0aW9uLmlubmVySFRNTCA9IG5laWdoYm9yaG9vZDtcclxuICAgICAgICBvcHRpb24udmFsdWUgPSBuZWlnaGJvcmhvb2Q7XHJcbiAgICAgICAgc2VsZWN0LmFwcGVuZChvcHRpb24pO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgY3Vpc2luZXMgSFRNTC5cclxuICovXHJcbmNvbnN0IGZpbGxDdWlzaW5lc0hUTUwgPSAoY3Vpc2luZXMgPSBzZWxmLmN1aXNpbmVzKSA9PiB7XHJcbiAgICBjb25zdCBzZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3Vpc2luZXMtc2VsZWN0Jyk7XHJcblxyXG4gICAgY3Vpc2luZXMuZm9yRWFjaChjdWlzaW5lID0+IHtcclxuICAgICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuICAgICAgICBvcHRpb24uaW5uZXJIVE1MID0gY3Vpc2luZTtcclxuICAgICAgICBvcHRpb24udmFsdWUgPSBjdWlzaW5lO1xyXG4gICAgICAgIHNlbGVjdC5hcHBlbmQob3B0aW9uKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSBHb29nbGUgbWFwLCBjYWxsZWQgZnJvbSBIVE1MLlxyXG4gKi9cclxud2luZG93LmluaXRNYXAgPSAoKSA9PiB7XHJcbiAgICBsZXQgbG9jID0ge1xyXG4gICAgICAgIGxhdDogNDAuNzIyMjE2LFxyXG4gICAgICAgIGxuZzogLTczLjk4NzUwMVxyXG4gICAgfTtcclxuICAgIHNlbGYubWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJyksIHtcclxuICAgICAgICB6b29tOiAxMixcclxuICAgICAgICBjZW50ZXI6IGxvYyxcclxuICAgICAgICBzY3JvbGx3aGVlbDogZmFsc2VcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEFkZCBtYXJrZXJzIHRvIHRoZSBtYXAgYWZ0ZXIgYmVpbmcgaW5pdGlhbGl6ZWRcclxuICAgIGFkZE1hcmtlcnNUb01hcCgpO1xyXG59XHJcblxyXG4vKipcclxuICogVXBkYXRlIHBhZ2UgYW5kIG1hcCBmb3IgY3VycmVudCByZXN0YXVyYW50cy5cclxuICovXHJcbmNvbnN0IHVwZGF0ZVJlc3RhdXJhbnRzID0gKCkgPT4ge1xyXG4gICAgY29uc3QgY1NlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjdWlzaW5lcy1zZWxlY3QnKTtcclxuICAgIGNvbnN0IG5TZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmVpZ2hib3Job29kcy1zZWxlY3QnKTtcclxuXHJcbiAgICBjb25zdCBjSW5kZXggPSBjU2VsZWN0LnNlbGVjdGVkSW5kZXg7XHJcbiAgICBjb25zdCBuSW5kZXggPSBuU2VsZWN0LnNlbGVjdGVkSW5kZXg7XHJcblxyXG4gICAgY29uc3QgY3Vpc2luZSA9IGNTZWxlY3RbY0luZGV4XS52YWx1ZTtcclxuICAgIGNvbnN0IG5laWdoYm9yaG9vZCA9IG5TZWxlY3RbbkluZGV4XS52YWx1ZTtcclxuXHJcbiAgICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRCeUN1aXNpbmVBbmROZWlnaGJvcmhvb2QoY3Vpc2luZSwgbmVpZ2hib3Job29kLCAoZXJyb3IsIHJlc3RhdXJhbnRzKSA9PiB7XHJcbiAgICAgICAgaWYgKGVycm9yKSB7IC8vIEdvdCBhbiBlcnJvciFcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzZXRSZXN0YXVyYW50cyhyZXN0YXVyYW50cyk7XHJcbiAgICAgICAgICAgIGZpbGxSZXN0YXVyYW50c0hUTUwoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEluY2x1ZGUgbWFwcyBhcGkgZHluYW1pY2FsbHkgb25seSBhZnRlciBldmVyeXRoaW5nIGVsc2UgaGFzIGJlZW4gZG9uZVxyXG4gICAgICAgICAgICBnZXRHb29nbGVNYXBzQXBpKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxufVxyXG5cclxuLyoqXHJcbiAqIENsZWFyIGN1cnJlbnQgcmVzdGF1cmFudHMsIHRoZWlyIEhUTUwgYW5kIHJlbW92ZSB0aGVpciBtYXAgbWFya2Vycy5cclxuICovXHJcbmNvbnN0IHJlc2V0UmVzdGF1cmFudHMgPSAocmVzdGF1cmFudHMpID0+IHtcclxuICAgIC8vIFJlbW92ZSBhbGwgcmVzdGF1cmFudHNcclxuICAgIHNlbGYucmVzdGF1cmFudHMgPSBbXTtcclxuICAgIGNvbnN0IHVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnRzLWxpc3QnKTtcclxuICAgIHVsLmlubmVySFRNTCA9ICcnO1xyXG5cclxuICAgIC8vIFJlbW92ZSBhbGwgbWFwIG1hcmtlcnNcclxuICAgIHNlbGYubWFya2Vycy5mb3JFYWNoKG0gPT4gbS5zZXRNYXAobnVsbCkpO1xyXG4gICAgc2VsZi5tYXJrZXJzID0gW107XHJcbiAgICBzZWxmLnJlc3RhdXJhbnRzID0gcmVzdGF1cmFudHM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgYWxsIHJlc3RhdXJhbnRzIEhUTUwgYW5kIGFkZCB0aGVtIHRvIHRoZSB3ZWJwYWdlLlxyXG4gKi9cclxuY29uc3QgZmlsbFJlc3RhdXJhbnRzSFRNTCA9IChyZXN0YXVyYW50cyA9IHNlbGYucmVzdGF1cmFudHMpID0+IHtcclxuICAgIGNvbnN0IHVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnRzLWxpc3QnKTtcclxuICAgIHJlc3RhdXJhbnRzLmZvckVhY2gocmVzdGF1cmFudCA9PiB7XHJcbiAgICAgICAgaWYgKERCSGVscGVyLmFkZFJlc3RhdXJhbnRzKCkpIHtcclxuICAgICAgICAgICAgREJIZWxwZXIuYWRkUmVzdGF1cmFudFRvRGF0YWJhc2UocmVzdGF1cmFudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHVsLmFwcGVuZChjcmVhdGVSZXN0YXVyYW50SFRNTChyZXN0YXVyYW50KSk7XHJcblxyXG4gICAgICAgIGlmICghc2VsZi5uZWlnaGJvcmhvb2RzLmluY2x1ZGVzKHJlc3RhdXJhbnQubmVpZ2hib3Job29kKSkge1xyXG4gICAgICAgICAgICBzZWxmLm5laWdoYm9yaG9vZHMucHVzaChyZXN0YXVyYW50Lm5laWdoYm9yaG9vZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXNlbGYuY3Vpc2luZXMuaW5jbHVkZXMocmVzdGF1cmFudC5jdWlzaW5lX3R5cGUpKSB7XHJcbiAgICAgICAgICAgIHNlbGYuY3Vpc2luZXMucHVzaChyZXN0YXVyYW50LmN1aXNpbmVfdHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgZmlsbE5laWdoYm9yaG9vZHNIVE1MKCk7XHJcbiAgICBmaWxsQ3Vpc2luZXNIVE1MKCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgcmVzdGF1cmFudCBIVE1MLlxyXG4gKi9cclxuY29uc3QgY3JlYXRlUmVzdGF1cmFudEhUTUwgPSAocmVzdGF1cmFudCkgPT4ge1xyXG4gICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xyXG5cclxuICAgIC8vIGNyZWF0ZSBwaWN0dXJlIGVsZW1lbnQgZm9yIHJlc3RhdXJhbnQgaW1hZ2UgaW4gcmVzdGF1cmFudCBsaXN0XHJcbiAgICBjb25zdCBwaWN0dXJlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncGljdHVyZScpO1xyXG4gICAgY29uc3QgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuICAgIGltYWdlLmNsYXNzTmFtZSA9ICdyZXN0YXVyYW50LWltZyc7XHJcbiAgICBpbWFnZS5hbHQgPSByZXN0YXVyYW50Lm5hbWU7XHJcblxyXG4gICAgY29uc3QgaW1hZ2VGaWxlbmFtZSA9IERCSGVscGVyLmltYWdlVXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KTtcclxuICAgIGlmIChpbWFnZUZpbGVuYW1lID09ICdub2ltZycpIHtcclxuICAgICAgICAvLyBJZiByZXN0YXVyYW50IGhhcyBub3QgYW4gaW1hZ2UsIGRpc3BsYXkgYSBubyBpbWFnZSBzdmdcclxuICAgICAgICAvLyBhbmQgdXNlIGl0cyBjb3JyZXNwb25kaW5nIHBuZyBhcyBhIGZhbGxiYWNrLlxyXG4gICAgICAgIC8vIEF1dGhvciBvZiB0aGUgbm9pbWcuc3ZnIGFuZCBub2ltZy5wbmcgaXMgY3JlZGl0ZWQgYXQgcGFnZSdzIGZvb3Rlci5cclxuICAgICAgICBjb25zdCBub0ltZ0ZhbGxiYWNrID0gYCR7aW1hZ2VGaWxlbmFtZX0ucG5nYDtcclxuICAgICAgICBhZGRJbWFnZVNvdXJjZVRvUGljdHVyZShwaWN0dXJlLCBgJHtpbWFnZUZpbGVuYW1lfS5zdmdgKTtcclxuICAgICAgICBhZGRJbWFnZVNvdXJjZVRvUGljdHVyZShwaWN0dXJlLCBub0ltZ0ZhbGxiYWNrKTtcclxuXHJcbiAgICAgICAgaW1hZ2Uuc3JjID0gbm9JbWdGYWxsYmFjaztcclxuICAgICAgICBpbWFnZS5jbGFzc05hbWUgKz0gJyBub2ltZyc7XHJcbiAgICAgICAgLy8gVE9ETzogRml4IG5vaW1nIHBuZyBmYWxsYmFjayBpbiBJRVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBnZXQgYWxsIHBvc3NpYmxlIG5hbWVzIG9mIGFuIGltYWdlIGRlcGVuZGluZyBvbiBpdHMgc2l6ZSAoc21hbGwsIG1lZGl1bSwgbGFyZ2UpXHJcbiAgICAgICAgY29uc3QgaW1hZ2VzUmVzaXplZCA9IGltYWdlTmFtZXNCeVNpemUoaW1hZ2VGaWxlbmFtZSk7XHJcbiAgICAgICAgLy8gYWRkIHNvdXJjZSB0byBwaWN0dXJlIGVsZW1lbnQgZm9yIG1lZGl1bSBzY3JlZW5zXHJcbiAgICAgICAgYWRkSW1hZ2VTb3VyY2VUb1BpY3R1cmUocGljdHVyZSwgaW1hZ2VzUmVzaXplZC5tZWRpdW0sICcobWluLXdpZHRoOiAzNjNweCkgYW5kIChtYXgtd2lkdGg6NDc5cHgpJyk7XHJcblxyXG4gICAgICAgIGltYWdlLnNyYyA9IGltYWdlc1Jlc2l6ZWQuc21hbGw7ICAgLy8gc21hbGwgaW1hZ2UgYnkgZGVmYXVsdFxyXG4gICAgfVxyXG5cclxuICAgIHBpY3R1cmUuYXBwZW5kKGltYWdlKTtcclxuICAgIGxpLmFwcGVuZChwaWN0dXJlKTtcclxuXHJcbiAgICBjb25zdCBuYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcclxuICAgIGxpLmFwcGVuZChuYW1lKTtcclxuXHJcbiAgICBjb25zdCBtb3JlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgbW9yZS5ocmVmID0gREJIZWxwZXIudXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KTtcclxuICAgIG1vcmUuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5uYW1lO1xyXG4gICAgbW9yZS50YWJJbmRleCA9IDA7XHJcbiAgICBuYW1lLmFwcGVuZChtb3JlKTtcclxuXHJcbiAgICBjb25zdCBuZWlnaGJvcmhvb2QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgICBuZWlnaGJvcmhvb2QuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5uZWlnaGJvcmhvb2Q7XHJcbiAgICBsaS5hcHBlbmQobmVpZ2hib3Job29kKTtcclxuXHJcbiAgICBjb25zdCBhZGRyZXNzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG4gICAgYWRkcmVzcy5pbm5lckhUTUwgPSByZXN0YXVyYW50LmFkZHJlc3M7XHJcbiAgICBsaS5hcHBlbmQoYWRkcmVzcyk7XHJcblxyXG4gICAgcmV0dXJuIGxpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGQgbWFya2VycyBmb3IgY3VycmVudCByZXN0YXVyYW50cyB0byB0aGUgbWFwLlxyXG4gKi9cclxuY29uc3QgYWRkTWFya2Vyc1RvTWFwID0gKHJlc3RhdXJhbnRzID0gc2VsZi5yZXN0YXVyYW50cykgPT4ge1xyXG4gICAgcmVzdGF1cmFudHMuZm9yRWFjaChyZXN0YXVyYW50ID0+IHtcclxuICAgICAgICAvLyBBZGQgbWFya2VyIHRvIHRoZSBtYXBcclxuICAgICAgICBjb25zdCBtYXJrZXIgPSBEQkhlbHBlci5tYXBNYXJrZXJGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQsIHNlbGYubWFwKTtcclxuICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXJrZXIsICdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBtYXJrZXIudXJsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgc2VsZi5tYXJrZXJzLnB1c2gobWFya2VyKTtcclxuICAgIH0pO1xyXG59XHJcbiJdfQ==
